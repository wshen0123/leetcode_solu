class Solution:
    # @param {character[][]} matrix
    # @return {integer}
    def maximalSquare(self, matrix):
        
        if not matrix:
            return 0
            
        m = len(matrix)
        n = len(matrix[0])
        
        matrix = [list(map(int, row)) for row in matrix]
        
        dp = [[0] * n for i in range(m)] # max square-length ending in [i][j]
        
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 0:
                    dp[i][j] = 0
                    continue
                
                if i-1 < 0 or j-1 < 0: # along boarder
                    dp[i][j] = matrix[i][j]
                    continue
                
                length = dp[i-1][j-1]
                if length == 0: # no pre-square
                    dp[i][j] = matrix[i][j]
                    continue

                for k in range(1, length + 1):
                    if matrix[i-k][j] != 1 or matrix[i][j-k] != 1:
                        dp[i][j] = k*matrix[i][j]
                        break
                else:                
                    dp[i][j] = length + 1
        
        max_length = max([dp[i][j] for i in range(m) for j in range(n)])
        return max_length * max_length

if __name__ == "__main__":
    matrix
    solu = Solution()
    print(solu.maximalSquare(matrix))
